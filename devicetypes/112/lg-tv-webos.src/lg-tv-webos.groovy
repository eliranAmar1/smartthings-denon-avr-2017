
/** * LG Smart TV Device Type * * Copyright 2015 Daniel Vorster * * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except * in compliance with the License. You may obtain a copy of the License at: * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License * for the specific language governing permissions and limitations under the License. * */metadata {	definition (name: "LG Smart TV", namespace: "dpvorster", author: "Daniel Vorster") {		 capability "TV" capability "Music Player" capability "Refresh" attribute "sessionId", "string" command "refresh"	} preferences { input("televisionIp", "string", title:"Television IP Address", description: "Television's IP address", required: true, displayDuringSetup: false) input("pairingKey", "string", title:"Pairing Key", description: "Pairing key", required: true, displayDuringSetup: false)	} 	simulator {		// TODO: define status and reply messages here	} 	tiles { standardTile("mute", "device.mute", inactiveLabel:false, decoration:"flat") { state "default", label:"Mute", icon:"st.custom.sonos.muted", action:"Music Player.mute" } standardTile("volumeUp", "device.status", inactiveLabel:false, decoration:"flat") { state "default", label:'', icon:"st.thermostat.thermostat-up", action:"TV.volumeUp" } standardTile("volumeDown", "device.status", inactiveLabel:false, decoration:"flat") { state "default", label:'', icon:"st.thermostat.thermostat-down", action:"TV.volumeDown" } standardTile("refresh", "device.status", inactiveLabel:false, decoration:"flat") { state "default", icon:"st.secondary.refresh", action:"Refresh.refresh" } standardTile("channelUp", "device.status", inactiveLabel:false, decoration:"flat") { state "default", label:'BBC1', icon:"st.thermostat.thermostat-up", action:"TV.channelUp" } standardTile("channelDown", "device.status", inactiveLabel:false, decoration:"flat") { state "default", label:'C4', icon:"st.thermostat.thermostat-up", action:"TV.channelDown" } main (["mute"]) 		details(["volumeDown", "volumeUp", "mute", "refresh","channelUp","channelDown"])	}} // parse events into attributesdef parse(String description) {	log.debug "Parsing '${description}'" if (description == "updated") { 	sendEvent(name:'refresh', displayed:false) } else { 	parseHttpResult(description) }		// TODO: handle 'volume' attribute	// TODO: handle 'channel' attribute	// TODO: handle 'power' attribute	// TODO: handle 'picture' attribute	// TODO: handle 'sound' attribute	// TODO: handle 'movieMode' attribute } def channelUp() {	log.debug "Executing 'channelUp' (BBC1)"	return sendCommand(17)} def channelDown() {	log.debug "Executing 'channelDown' (C4)"	return sendCommand(20)} // handle commandsdef volumeUp() {	log.debug "Executing 'volumeUp'"	return sendCommand(2)} def volumeDown() {	log.debug "Executing 'volumeDown'"	return sendCommand(3)} def refresh() { log.debug "Executing 'refresh'" return sessionIdCommand()} def mute() {